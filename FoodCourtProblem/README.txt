Student Name: Shane Norden
Student ID: 011008524
Class: CSCE 36103 - OPERATING SYSTEMS
Assignment: HW9: Food Court

How My Program Works:
There were a few things I wanted to change with the initial values given to us as parameters. Originally, units of time were 100ms, however I had found that most of the threads run too fast to put stress on the semaphores and actually showcase to me that the code was working. I decided to change it to 300ms as it offered greater variability as well as showcasing that my code works by stressing the semaphores more. I had found that in testing that the 300ms was the perfect amount. Anything faster would showcase the output in a way that showed that the semaphores and muxes were working as intended. 

The first thing the program does is parse the arguments, then it set the maximum amount of time and customers allowed given the arguments. Once that is done, the variables are instantiated. Ironically, I did this wrong the first time which caused me a few head scratches for a bit. From there, one thread for the main system is created that keeps track of the time is created. Once the time on this main thread runs out, no more customer threads are created with the remaining threads finishing their sequence. Once the main thread is created and running, the customer threads are created. The amount of threads created are determined by one of the arguments parsed earlier. Each thread would be delayed for a random amount of time from 0ms to 1000ms. From there, I did another random wait. I did this to simulate the customer walking into the food court. From there, I did the handleWaitingArea function. 

I decided to change handWaitingArea from  void to a Boolean. The reason why is so in the runnable section, if the function returned false I could return out of the thread and stop it from further progressing and display a message that they customer had left from frustration. The logic in handleWaitingArea relied in the boolean tryAcquire() method. This method is implemented with the semaphore import. What this method does is in that instance it would try and acquire a permit to that semaphore. If it could not acquire a semaphore, it would be false. If It did acquire a semaphore, it would keep that permit and return true. In handleWaitingArea, if tryAcquire was false, it would return false and leave the function, then leave the thread. If it was true, a permit would be acquired, the waiting area counter would be incremented, and a message with that customer ID would be printed out saying they're in the waiting area.

From there, the thread would go to the chooseCounter method. In that method, a random number between 0 and 2 would be selected. 0 was burgers, 1 was pizza, and 2 was wings. Once the number was chosen, the thread would wait and acquire a permit from the counter. Once that permit was received, the thread would release the permit for waitingArea, decrement the counter for waitingArea, then increment the counter for that counter queue. These semaphore acted as the queue to the cashier for that counter. After a random amount of time, the thread would try and acquire the cashier. The cashier was a semaphore with only one permit, thus acting as a mux. Once the permit for that mux was achieved, it would release the permit for the counter queue and decrement the counter. After a random amount of time, the system would print a message saying the customer paid, ate, then left the food court. 